package com.incredibles.reclib;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URL;
import java.nio.charset.Charset;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map.Entry;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.incredibles.storage.RecommenderDbService;
import com.incredibles.storage.RecommenderDbServiceCreator;
import com.restfb.DefaultFacebookClient;
import com.restfb.FacebookClient;
import com.restfb.Parameter;
import com.restfb.FacebookClient.AccessToken;
import com.restfb.exception.FacebookException;
import com.restfb.types.Event;
import com.restfb.types.Place;

public class DiscriminatorCategorization {

	/*Returns uncategorized events facebook and funspotter id*/
	public HashMap<Long, Integer> getUncategorizedEventsIds(){
		HashMap<Long, Integer> FacebookEventId = null;
		RecommenderDbService dbService = null;
		try {
			dbService = RecommenderDbServiceCreator.createCloud();
			FacebookEventId = dbService.getAllEventFacebookAndFunspotterId();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}finally {
			if (dbService != null) {
				try {
					dbService.close();
				} catch (SQLException | IOException e) {
					e.printStackTrace();
				}
			}
		}
		return FacebookEventId;
	}
	
	public String easyCategorizing(String FacebookCategory){
		return null;
	}
	
	public void categorizing(){
		HashMap<Long, Integer> FacebookEventId = getUncategorizedEventsIds();
		//lekérni új táblábólcategory list elemeket
		for(Entry<Long, Integer>entry: FacebookEventId.entrySet()){
			
		}
	}
	
	public void valami(){
		String MY_APP_SECRET = "add4434d3f3f754d29d567d59f285be5";
		String MY_APP_ID = "513927361994826";
		AccessToken accessToken = new DefaultFacebookClient().obtainAppAccessToken(MY_APP_ID, MY_APP_SECRET);
		FacebookClient publicOnlyFacebookClient = new DefaultFacebookClient();
		FacebookClient facebookClient = new DefaultFacebookClient(accessToken.getAccessToken());
		HashMap<Long, String> category_list = new HashMap<Long, String>();
		JSONObject data = new JSONObject();
		int egyezok = 0;
		
		HashMap<Long, Integer> FacebookEventId = getUncategorizedEventsIds();
		
		int kalapkabat = 0;
		for(Entry<Long, Integer>entry: FacebookEventId.entrySet()){
			kalapkabat++;
			if(kalapkabat<=200){
				Long FacebookId = entry.getKey();
				Integer EventId = entry.getValue();
				Event event = null;
				Place place = null;
				String category = null;
				JSONArray categoryList = null;
				JSONObject faszom = null;
				kalapkabat++;
				
				String EventFacebookId = FacebookId.toString();
				try{
					event = facebookClient.fetchObject(EventFacebookId, Event.class, Parameter.with("metadata", 1));
					System.out.println(event.getVenue().getId());
					try{
						place  = facebookClient.fetchObject(event.getVenue().getId(), Place.class, Parameter.with("metadata", 1));
						try{
							if(event.getVenue().getId().equals(138790012848413L)){
								System.out.println("ittvan");
							}
							System.out.println(place.getMetadata().getConnections().getTagged().toString());
							try {
								JSONObject valami = readJsonFromUrl(place.getMetadata().getConnections().getTagged().toString());
								try{
									JSONArray tomb = valami.getJSONArray("data");
									System.out.println(tomb);
									JSONObject valami2 = tomb.getJSONObject(0);
									JSONObject valami3 = valami2.getJSONObject("to");
									JSONArray tomb2 = valami3.getJSONArray("data");
									faszom = tomb2.getJSONObject(0);
									category = faszom.get("category").toString();
									categoryList = faszom.getJSONArray("category_list");
									for(int i=0; i< categoryList.length(); i++){
										System.out.println(categoryList.getJSONObject(i).getLong("id"));
										System.out.println(categoryList.getJSONObject(i).get("name"));
										Long id = categoryList.getJSONObject(i).getLong("id");
										String name = categoryList.getJSONObject(i).get("name").toString();
										if(category_list.containsKey(id)){
											egyezok++;
										}else{
											category_list.put(id, name);
										}
									}
									System.out.println(faszom.get("category").toString());
								}catch(JSONException e){}
							} catch (IOException | JSONException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}catch(NullPointerException e){
							
						}
					}catch(FacebookException | NullPointerException e){
						System.out.println("nem tudta lekerni a helyet");
					}
				}catch(FacebookException e){
					System.out.println("nem tudta lekerni az eventet");
				}			
			}
		}
		System.out.println("egyezok: "+egyezok);
		System.out.println("összes: "+category_list.size());
		for(Entry<Long, String>entry2: category_list.entrySet()){
			System.out.println("Category id: "+entry2.getKey()+"   Category name: "+entry2.getValue());
		}
	}
	
	private static JSONObject readJsonFromUrl(String url) throws IOException, JSONException {
		InputStream is = new URL(url).openStream();
		
		BufferedReader rd = new BufferedReader(new InputStreamReader(is, Charset.forName("UTF-8")));
		String jsonText = readAll(rd);
		try {	
			JSONObject json = new JSONObject(jsonText);
			return json;
		}finally {
			is.close();
		}
	}
	
	private static String readAll(Reader rd) throws IOException {
		StringBuilder sb = new StringBuilder();
		int cp;
		while ((cp = rd.read()) != -1) {
			sb.append((char) cp);
		}
		return sb.toString();
	}
	
}
